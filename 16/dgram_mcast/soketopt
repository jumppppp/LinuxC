IP(7)                               Linux 程序员手册                              IP(7)

NNAAMMEE ((名名称称))
       ip - Linux IPv4 协议实现

SSYYNNOOPPSSIISS((总总览览))
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>
       ##iinncclluuddee <<nneett//nneettiinneett..hh>>

       _t_c_p___s_o_c_k_e_t == ssoocckkeett((PPFF__IINNEETT,, SSOOCCKK__SSTTRREEAAMM,, 00));;
       _r_a_w___s_o_c_k_e_t == ssoocckkeett((PPFF__IINNEETT,, SSOOCCKK__RRAAWW,, _p_r_o_t_o_c_o_l));;
       _u_d_p___s_o_c_k_e_t == ssoocckkeett((PPFF__IINNEETT,, SSOOCCKK__DDGGRRAAMM,, _p_r_o_t_o_c_o_l));;

DDEESSCCRRIIPPTTIIOONN((描描述述))
       Linux  实现描述于  RFC791  和  RFC1122  中的  Internet  协议,版本4.  iipp 包括遵循
       RFC1112 的第二层的多信道广播技术的实现.它也包括含包过滤器的IP路由器.

       程序员的接口与   BSD   的套接字(socket)兼容．    要获得关于套接字的更多信息,参见
       ssoocckkeett(7)

       创建一个IP套接字是通过以   ssoocckkeett((PPFF__IINNEETT,,   ssoocckkeett__ttyyppee,,   pprroottooccooll))   方式调用
       ssoocckkeett(2) 函数来实现的． 有效的套接字类型（socket_type）有： SSOOCCKK__SSTTRREEAAMM  用来打
       开一个 ttccpp(7) 套接字， SSOOCCKK__DDGGRRAAMM 用来打开一个 uuddpp(7) 套接字，或者是 SSOOCCKK__RRAAWW 用
       来打开一个 rraaww(7) 套接字用来直接访问 IP 协议． _p_r_o_t_o_c_o_l 指的是要接收或者发送出去
       的包含在  IP  头标识(header)中的 IP 协议． 对于TCP套接字而言,唯一的有效 _p_r_o_t_o_c_o_l
       值是  00  和  IIPPPPRROOTTOO__TTCCPP  对于UDP套接字而言,唯一的有效  _p_r_o_t_o_c_o_l   值是   00   和
       IIPPPPRROOTTOO__UUDDPP..  而对于 SSOOCCKK__RRAAWW 你可以指定一个在 RFC1700 中定义的有效 IANA IP 协议
       代码来赋值.

       当一个进程希望接受新的来访包或者连接时,它应该使用 bbiinndd(2) 绑定一个套接字到一个本
       地接口地址．  任意给定的本地(地址,端口)对只能绑定一个IP套接字． 当调用 bind 时中
       声明了 IINNAADDDDRR__AANNYY  时,套接字将会绑定到  _所_有  本地接口．当在未绑定的套接字上调用
       lliisstteenn(2)  或者 ccoonnnneecctt(2) 时,套接字会自动绑定到一个本地地址设置为 IINNAADDDDRR__AANNYY 的
       随机的空闲端口上．

       除非你设置了 SS00__RREEUUSSEEAADDDDRR 标识，否则一个已绑定的 TCP  本地套接字地址在关闭后的一
       段时间内不可用． 使用该标识的时候要小心，因为它会使 TCP 变得不可靠．

AADDDDRREESSSS FFOORRMMAATT((地地址址格格式式))
       一个  IP 套接字地址定义为一个 IP 接口地址和一个端口号的组合． 基本 IP 协议不会提
       供端口号,它们通过更高层次的协议如  uuddpp(7)  和  ttccpp(7)  来实现．  对于raw套接字，
       ssiinn__ppoorrtt 设置为IP协议．

              struct sockaddr_in {
              sa_family_t sin_family; /* 地址族: AF_INET */
              u_int16_t sin_port; /* 按网络字节次序的端口 */
              struct in_addr sin_addr; /* internet地址 */
              };

              /* Internet地址. */
              struct in_addr {
              u_int32_t s_addr; /* 按网络字节次序的地址 */
              };

       _s_i_n___f_a_m_i_l_y  总是设置为 AAFF__IINNEETT.  这是必需的；在 Linux 2.2 中，如果该设置缺失，大
       多数联网函数会返回 EEIINNVVAALL _s_i_n___p_o_r_t  包含按网络字节排序的端口号．端口号在1024以下
       的称为  _保_留_端_口． 只有那些有效用户标识为 0 或者 CCAAPP__NNEETT__BBIINNDD__SSEERRVVIICCEE 有功能的进
       程才可以 bbiinndd(2)  到这些套接字．注意原始的（raw）IPv4协议没有这样的端口概念,它们
       只通过更高的协议如 ttccpp(7) 和 uuddpp(7) 来实现．

       _s_i_n___a_d_d_r 指的是 IP 主机地址.  在 ssttrruucctt iinn__aaddddrr 中的 _a_d_d_r 部分包含按网络字节序的
       主机接口地址．    iinn__aaddddrr    应该只能通过使用    iinneett__aattoonn(3),     iinneett__aaddddrr(3),
       iinneett__mmaakkeeaaddddrr(3)  库函数或者直接通过名字解析器（参见 ggeetthhoossttbbyynnaammee(3)） 来访问．
       IPv4 地址分成单点广播，广播传送和多点广播地址． 单点广播地址指定了一台主机的单一
       接口，广播地址指 定了在一个网段上的所有主机， 而多点广播地址则在一个多点传送组中
       寻址所有主机.  只有当设置了套接字标识 SSOO__BBRROOAADDCCAASSTT  时，  才能收发数据报到广播地
       址． 在当前的实现中，面向连接的套接字只允许使用单点传送地址．

       注意地址和端口总是按照网络字节序存储的．    这意味着你需要对分配给端口的号码调用
       hhttoonnss(3)．． 所有在标准库中的地址/端口处理函数都是按网络字节序运行的．

       有几个特殊的地址： IINNAADDDDRR__LLOOOOPPBBAACCKK (127.0.0.1)  总是代表经由回环设备的本地主机；
       IINNAADDDDRR__AANNYY  (0.0.0.0)  表示任何可绑定的地址； IINNAADDDDRR__BBRROOAADDCCAASSTT (255.255.255.255)
       表示任何主机，由于历史的原因，这与绑定为 IINNAADDDDRR__AANNYY 有同样的效果.

SSOOCCKKEETT OOPPTTIIOONNSS((套套接接字字选选项项))
       IP 支持一些与协议相关的套接字选项，这些选项可以通过 sseettssoocckkoopptt(2) 设置，并可以通
       过  ggeettssoocckkoopptt(2)  读取． IP 的套接字选项级别为 SSOOLL__IIPP 这是一个布尔整型标识,当值
       为0时为假,否则则为真.

       IIPP__OOPPTTIIOONNSS
              设置或者获取将由该套接字发送的每个包的 IP 选项． 该参数是一个指向包含选项
              和选项长度的存储缓冲区的指针． sseettssoocckkoopptt(2) 系统调用设置与一个套接字相关
              联的 IP 选项.  IPv4 的最大选项长度为 40 字节． 参阅  RFC791  获取可用的选
              项．  如果一个  SSOOCCKK__SSTTRREEAAMM 套接字收到的初始连接请求包包含 IP 选项时， IP
              选项自动设置为来自初始包的选项，同时反转路由头． 在连接建立以后将不允许来
              访的包修改选项．     缺省情况下是关闭对所有来访包的源路由选项的，你可以用
              aacccceepptt__ssoouurrccee__rroouuttee        sysctl        来激活．仍然处理其它选项如时间戳
              （timestamp）．  对于数据报套接字而言，IP  选项只能由本地用户设置．调用带
              _I_P___O_P_T_I_O_N_S 的 ggeettssoocckkoopptt(2) 会把当前用于发送的 IP  选项放到你提供的缓冲区
              中．

       IIPP__PPKKTTIINNFFOO
              传递一条包含 ppkkttiinnffoo 结构(该结构提供一些来访包的相关信息)的 _I_P___P_K_T_I_N_F_O 辅
              助信息.  这个选项只对数据报类的套接字有效．

              struct in_pktinfo
              {
              unsigned int ipi_ifindex; /* 接口索引 */
              struct in_addr ipi_spec_dst; /* 路由目的地址 */
              struct in_addr ipi_addr; /* 头标识目的地址 */
              };

              iippii__iiffiinnddeexx 指的是接收包的接口的唯一索引． iippii__ssppeecc__ddsstt  指的是路由表记录
              中的目的地址，而 iippii__aaddddrr 指的是包头中的目的地址． 如果给 sendmsg (2)传递
              了  _I_P___P_K_T_I_N_F_O_，  那么外发的包会通过在  iippii__iiffiinnddeexx  中指定的接口  发送出
              去，同时把 iippii__ssppeecc__ddsstt 设置为目的地址．

       IIPP__RREECCVVTTOOSS
              如果打开了这个选项，则 _I_P___T_O_S _, 辅助信息会与来访包一起传递． 它包含一个字
              节用来指定包头中的服务/优先级字段的类型． 该字节为一个布尔整型标识．

       IIPP__RREECCVVTTTTLL
              当设置了该标识时，  传送一条带有用一个字节表示的接收包生存时间（time   to
              live）字段的 _I_P___R_E_C_V_T_T_L 控制信息． 此选项还不支持 SSOOCCKK__SSTTRREEAAMM 套接字．

       IIPP__RREECCVVOOPPTTSS
              用一条 _I_P___O_P_T_I_O_N_S 控制信息传递所有来访的 IP 选项给用户． 路由头标识和其它
              选项已经为本地主机填好． 此选项还不支持 _S_O_C_K___S_T_R_E_A_M 套接字．

       IIPP__RREETTOOPPTTSS
              等同于 _I_P___R_E_C_V_O_P_T_S 但是返回的是带有时间戳的未处理的原始选项和在这段路由中
              未填入的路由记录项目．

       IIPP__TTOOSS 设置或者接收源于该套接字的每个IP包的  Type-Of-Service  （TOS 服务类型）字
              段．它被用来在网络上区分包的优先级． TOS 是单字节的字段．定义了一些的标准
              TOS      标识：      IIPPTTOOSS__LLOOWWDDEELLAAYY      用来为交互式通信最小化延迟时间，
              IIPPTTOOSS__TTHHRROOUUGGHHPPUUTT  用来优化吞吐量，  IIPPTTOOSS__RREELLIIAABBIILLIITTYY  用来作可靠性优化，
              IIPPTTOOSS__MMIINNCCOOSSTT  应该被用作"填充数据"，对于这些数据，低速传输是无关紧要的．
              至多只能声明这些  TOS   值中的一个．其它的都是无效的，应当被清除．   缺省
              时,Linux首先发送  IIPPTTOOSS__LLOOWWDDEELLAAYY 数据报, 但是确切的做法要看配置的排队规则
              而定.      一些高优先级的层次可能会要求一个有效的用户标识     0      或者
              CCAAPP__NNEETT__AADDMMIINN   能力.    优先级也可以以于协议无关的方式通过(  SSOOLL__SSOOCCKKEETT,,
              SSOO__PPRRIIOORRIITTYY )套接字选项(参看 ssoocckkeett(7) )来设置.

       IIPP__TTTTLL 设置或者检索从此套接字发出的包的当前生存时间字段.

       IIPP__HHDDRRIINNCCLL
              如果打开的话, 那么用户可在用户数据前面提供一个 ip 头.  这只对 SSOOCCKK__RRAAWW 有
              效.参看  rraaww(7)  以获得更多信息.当激活了该标识之后,其值由  _I_P___O_P_T_I_O_N_S  设
              定,并且 _I_P___T_O_S 被忽略.

       IIPP__RREECCVVEERRRR
              允许传递扩展的可靠的错误信息.  如果在数据报上激活了该标识, 那么所有产生的
              错误会在每套接字一个的错误队列中排队等待.    当用户从套接字操作中收到错误
              时,就可以通过调用设置了 MMSSGG__EERRRRQQUUEEUUEE 标识的 rreeccvvmmssgg(2) 来接收.   描述错误
              的  ssoocckk__eexxtteennddeedd__eerrrr 结构将通过一条类型为 _I_P___R_E_C_V_E_R_R _, 级别为 SSOOLL__IIPP的的辅辅
              助助信信息息进进行行传传递递..  这个选项对在未连接的套接字上可靠地处理错误很有用.   错误
              队列的已收到的数据部分包含错误包.

              IP   按照下面的方法使用   ssoocckk__eexxtteennddeedd__eerrrr   结构：   ICMP  包接收的错误
              _e_e___o_r_i_g_i_n    设为    SSOO__EEEE__OORRIIGGIINN__IICCMMPP     ,,     对于本地产生的错误则设为
              SSOO__EEEE__OORRIIGGIINN__LLOOCCAALL ..  _e_e___t_y_p_e 和 _e_e___c_o_d_e 设置为 ICMP 头标识的类型和代码字
              段.  _e_e___i_n_f_o 包含用于 EEMMSSGGSSIIZZEE 时找到的 MTU.  _e_e___d_a_t_a 目前没有使用.  当错
              误来自于网络时,该套接字上所有IP选项都被激活  (_I_P___O_P_T_I_O_N_S, _I_P___T_T_L, 等．)并
              且当做控制信息包含错误包中传递.引发错误的包的有效载荷会以正常数据返回.

              在 SSOOCCKK__SSTTRREEAAMM 套接字上， _I_P___R_E_C_V_E_R_R  会有细微的语义不同.它并不保存下次超
              时的错误,而是立即传递所有进来的错误给用户.  这对 TCP 连接时间很短的情况很
              有用,因为它要求快速的错误处理.  使用该选项要小心:因为不允许从路由转移和其
              它正  常条件下正确地进行恢复,它使得TCP变得不可靠,并且破坏协议的规范.   注
              意TCP没有错误队列; MMSSGG__EERRRRQQUUEEUUEE 对于 SSOOCCKK__SSTTRREEAAMM 套接字是非法的.   因此所
              有错误都会由套接字函数返回,或者只返回 SSOO__EERRRROORR ..

              对于原始(raw)套接字而言,  _I_P___R_E_C_V_E_R_R 允许传递所有接收到的ICMP错误给应用程
              序,否则错误只在连接的套接字上报告出来.

              它设置或者检索一个整型布尔标识.  _I_P___R_E_C_V_E_R_R 缺省设置为off(关闭).

       IIPP__PPMMTTUU__DDIISSCCOOVVEERR
              为套接字设置或接收Path MTU  Discovery  setting(路径MTU发现设置).   当允许
              时,Linux会在该套接字上执行定  义于RFC1191中的Path MTU Discovery(路径MTU发
              现).  don't 段标识会设置在所有外发的数据报上.  系统级别的缺省值是这样的：
              SSOOCCKK__SSTTRREEAAMM  套接字由 iipp__nnoo__ppmmttuu__ddiisscc sysctl 控制，而对其它所有的套接字都
              被都屏蔽掉了，对于非 SSOOCCKK__SSTTRREEAAMM 套接字而言,  用户有责任按照MTU的大小对数
              据分块并在必要的情况下进行中继重发.如果设置了该标识 (用 EEMMSSGGSSIIZZEE ),内核会
              拒绝比已知路径MTU更大的包.

              Path MTU discovery(路径MTU发现)标识   含义
              IP_PMTUDISC_WANT                      对每条路径进行设置.
              IP_PMTUDISC_DONT                      从不作Path MTU Discovery(路径MTU发现).
              IP_PMTUDISC_DO                        总作Path MTU Discovery(路径MTU发现).

              当允许 PMTU  （路径MTU）搜索时,  内核会自动记录每个目的主机的path  MTU(路
              径MTU).当它使用    ccoonnnneecctt(2)   连接到一个指定的对端机器时,可以方便地使用
              IIPP__MMTTUU  套接字选项检索当前已知的   path   MTU(路径MTU)(比如，在发生了一个
              EEMMSSGGSSIIZZEE  错误后).它可能随着时间的推移而改变.  对于带有许多目的端的非连接
              的套接字,一个特定目的端的新到来的 MTU 也可以使用错误队列(参看 IIPP__RREECCVVEERRRR)
              来存取访问.  新的错误会为每次到来的 MTU 的更新排队等待.

              当进行  MTU 搜索时,来自数据报套接字的初始包可能会被丢弃.  使用 UDP 的应用
              程序应该知道这个并且考虑 其包的中继传送策略.

              为了在未连接的套接字上引导路径 MTU 发现进程,  我们可以用一个大的数据报(头
              尺寸超过64K字节)启动, 并令其通过更新路径 MTU 逐步收缩.

              为了获得路径MTU连接的初始估计,可通过使用  ccoonnnneecctt(2) 把一个数据报套接字连
              接到目的地址,并通过调用带 IIPP__MMTTUU选选项项的的 ggeettssoocckkoopptt(2) 检索该MTU.

       IIPP__MMTTUU 检索当前套接字的当前已知路径MTU.只有在套接字被连接时才是有效的.返回一个整
              数.只有作为一个 ggeettssoocckkoopptt(2) 才有效.

       IIPP__RROOUUTTEERR__AALLEERRTT
              给该套接字所有将要转发的包设置IP路由器警告（IP  RouterAlert option）选项.
              只对原始套接字（raw socket）有效,这对用户空间的 RSVP后 台守护程序之类很有
              用.  分解的包不能被内核转发,用户有责任转发它们.套接字绑定被忽略, 这些包只
              按协议过滤.  要求获得一个整型标识.

       IIPP__MMUULLTTIICCAASSTT__TTTTLL
              设置或者读取该套接字的外发多点广播包的生存时间值.  这对于多点广播包设置可
              能的最小TTL很重要.   缺省值为1,这意味着多点广播包不会超出本地网段, 除非用
              户程序明确地要求这么做.参数是一个整数.

       IIPP__MMUULLTTIICCAASSTT__LLOOOOPP
              设置或读取一个布尔整型参数以决定发送的多点广播包是否应该被回送到本地套接
              字.

       IIPP__AADDDD__MMEEMMBBEERRSSHHIIPP
              加入一个多点广播组.参数为 ssttrruucctt iipp__mmrreeqqnn 结构.

              struct ip_mreqn
              {
              struct in_addr imr_multiaddr; /* IP多点传送组地址 */
              struct in_addr imr_address; /* 本地接口的IP地址 */
              int imr_ifindex; /* 接口索引 */
              };

              _i_m_r___m_u_l_t_i_a_d_d_r 包含应用程序希望加入或者退出的多点广播组的地址.  它必须是一
              个有效的多点广播地址.  _i_m_r___a_d_d_r_e_s_s 指的是系统用来加入多点广播组的本地接口
              地址;如果它与  IINNAADDDDRR__AANNYY 一致,那么由系统选择一个合适的接口.  _i_m_r___i_f_i_n_d_e_x
              指的是要加入/脱离 _i_m_r___m_u_l_t_i_a_d_d_r 组的接口索引,或者设为0表示任何接口.

              由于兼容性的缘故,老的 iipp__mmrreeqq 接口仍然被支持.它与 iipp__mmrreeqqnn 只有一个地方不
              同,就是没有包括 _i_m_r___i_f_i_n_d_e_x 字段.这只在作为一个 sseettssoocckkoopptt(2) 时才有效.

       IIPP__DDRROOPP__MMEEMMBBEERRSSHHIIPP
              脱离一个多点广播组.参数为     iipp__mmrreeqqnn     或者     iipp__mmrreeqq     结构,这与
              _I_P___A_D_D___M_E_M_B_E_R_S_H_I_P 类似.

       IIPP__MMUULLTTIICCAASSTT__IIFF
              为多点广播套接字设置本地设备.参数为  iipp__mmrreeqqnn  或者   iipp__mmrreeqq   结构,它与
              _I_P___A_D_D___M_E_M_B_E_R_S_H_I_P 类似.

              当传递一个无效的套接字选项时,返回 EENNOOPPRROOTTOOOOPPTT ..

SSYYSSCCTTLLSS
       IP协议支持          sysctl         接口配置一些全局选项.sysctl可通过读取或者写入
       //pprroocc//ssyyss//nneett//iippvv44//** 文件或使用 ssyyssccttll(2) 接口来存取访问.

       iipp__ddeeffaauulltt__ttttll
              设置外发包的缺省生存时间值.此值可以对每个套接字通过 _I_P___T_T_L 选项来修改.

       iipp__ffoorrwwaarrdd
              以一个布尔标识来激活IP转发功能.IP转发也可以按接口来设置

       iipp__ddyynnaaddddrr
              打开接口地址改变时动态套接字地址和伪装记录的重写.  这对具有变化的IP地址的
              拨号接口很有 用.0表示不重写,1打开其功能,而2则激活冗余模式.

       iipp__aauuttooccoonnffiigg
              无文档

       iipp__llooccaall__ppoorrtt__rraannggee
              包含两个整数,定义了缺省分配给套接字的本地端口范围.   分配起始于第一个数而
              终止于第二个数.   注意这些端口不能与伪装所使用的端口相冲突(尽管这种情况也
              可以处理).   同时,随意的选择可能会导致一些防火墙包过滤器的问题,它们会误认
              为本地端口在使用.   第一个数必须至少>1024,最好是>4096以避免与众所周知的端
              口发生冲突， 从而最大可能的减少防火墙问题.

       iipp__nnoo__ppmmttuu__ddiisscc
              如果打开了,缺省情况下不对TCP套接字执行路径MTU发现.   如果在路径上误配置了
              防火墙(用来丢弃所有 ICMP包)或者误配置了接口 (例如,设置了一个两端MTU不同的
              端对端连接),路径MTU发现可能会失败.  宁愿修复路径上的损坏的路由器,也好过整
              个地关闭路径MTU发现, 因为这样做会导致网络上的高开销.

       iippffrraagg__hhiigghh__tthhrreesshh,, iippffrraagg__llooww__tthhrreesshh
              如果排队等待的IP碎片的数目达到    iippffrraagg__hhiigghh__tthhrreesshh    ,,    队列被排空为
              iippffrraagg__llooww__tthhrreesshh ..  这包含一个表示字节数的整数.

       iipp__aallwwaayyss__ddeeffrraagg
              [kernel              2.2.13中的新功能;在早期内核版本中,该功能在编译时通过
              CCOONNFFIIGG__IIPP__AALLWWAAYYSS__DDEEFFRRAAGG 选项来控制]

              当该布尔标识被激活(不等于0)时, 来访的碎片(IP包的一部分,这生成于当一些在源
              端和目的端之间的主机认  定包太大而分割成许多碎片的情况下)将在处理之前重新
              组合(碎片整理), 即使它们马上要被转发也如此．

              只在运行着一台与网络单一连接的防火墙或者透明代理服务器时才这么干;  对于正
              常的路由器或者主机, 永远不要打开它.  否则当碎片在不同连接中通过时碎片的通
              信可能会被扰乱.  而且碎片重组也需要花费大量的内存和 CPU 时间．

              这在配置了伪装或者透明代理的情况下自动打开.

       nneeiigghh//**
              参看 aarrpp(7)

IIOOCCTTLLSS
       所有在 ssoocckkeett(7) 中有描述 的 ioctl 都可应用于ip.

       用于配置防火墙应用的ioctl记载在 iippcchhaaiinnss 包的 iippffww(7) 的文档中.

       用来配置普通设备参数的ioctl在 nneettddeevviiccee(7) 中有描述.

NNOOTTEESS((备备注注))
       使用 SSOO__BBRROOAADDCCAASSTT 选项要小心 - 它在 Linux 中没有权限要求.   不小心的广播很容易导
       致网络过载.对于新的应用协议而言,最 好是使用多点广播组来替代广播.我们不鼓励使用广
       播.

       有些其它的BSD套接字实现提供了 _I_P___R_C_V_D_S_T_A_D_D_R 和 _I_P___R_E_C_V_I_F  套接字选项来获得目的地
       址以及接收数据报的接口.Linux有更通用的 _I_P___P_K_T_I_N_F_O 来完成相同任务.

EERRRROORRSS((错错误误))
       ENOBUFS,EPERM对EACCES等.)

       EENNOOTTCCOONNNN
              操作只定义于连接的套接字,而该套接字却没有连接.

       EEIINNVVAALL 传递无效的参数.  对于发送操作,这可以因发送到一个 _b_l_a_c_k_h_o_l_e_(_黑_洞_) 路由而引
              发.

       EEMMSSGGSSIIZZEE
              数据报大于该路径上的 MTU,并且它不能被分成碎片.

       EEAACCCCEESS 没有必要权限的用户试图执行一项需要某些权限的操作.      这包括:     在没有
              SSOO__BBRROOAADDCCAASSTT  标识设置的情况下发送一个包到广播地址.  通过一条 _禁_止_的 路由
              发送包.  在没有  CCAAPP__NNEETT__AADDMMIINN  或者有效用户标识不为0的情况下修改防火墙设
              置.   在没有 CCAAPP__NNEETT__BBIINNDD__SSEERRVVIICCEE 能力或者有效用户标识不为零0的情况下绑定
              一个保留端口.

       EEAADDDDRRIINNUUSSEE
              试图绑定到一个已在使用的地址.

       EENNOOMMEEMM 和 EENNOOBBUUFFSS
              没有足够的内存可用.

       EENNOOPPRROOTTOOOOPPTT 和 EEOOPPNNOOTTSSUUPPPP
              传递无效的套接字选项.

       EEPPEERRMM  用户没有权限设置高优先级,修改配置或者发送信号到请求的进程或组.

       EEAADDDDRRNNOOTTAAVVAAIILL
              请求一个不存在的接口或者请求的源端地址不是本地的.

       EEAAGGAAIINN 在一个非阻塞的套接字上进行操作会阻塞.

       EESSOOCCKKTTNNOOSSUUPPPPOORRTT
              套接字未配置或者请求了一个未知类型的套接字.

       EEIISSCCOONNNN
              在一个已经连接的套接字上调用 ccoonnnneecctt(2)..

       EEAALLRREEAADDYY
              在一个非阻塞的套接字上的连接操作已经在进行中.

       EECCOONNNNAABBOORRTTEEDD
              在一次 aacccceepptt(2) 执行中连接被关闭.

       EEPPIIPPEE  连接意外关闭或者被对端关闭.

       EENNOOEENNTT 在没有报到达的套接字上调用 SSIIOOCCGGSSTTAAMMPP ..

       EEHHOOSSTTUUNNRREEAACCHH
              没有有效路由表记录匹配目的地址.该错误可以被来自远程路由器的  ICMP消息或者
              因为本地路由表的缘故而引发.

       EENNOODDEEVV 网络设备不可用或者不适于发送IP.

       EENNOOPPKKGG 内核子系统没有配置.

       EENNOOBBUUFFSS,, EENNOOMMEEMM
              没有足够的空闲内存.  这常常意味着内存分配因套接字缓冲区的限制而受限, 而不
              是因为系统内存的缘故,但是这也不是100%正确．

       其它错误可能由重叠协议族生成;参看 ttccpp(7), rraaww(7), uuddpp(7) 和 ssoocckkeett(7).

VVEERRSSIIOONNSS((版版本本))
       _I_P___P_K_T_I_N_F_O, _I_P___M_T_U, _I_P___P_M_T_U___D_I_S_C_O_V_E_R, _I_P___P_K_T_I_N_F_O, _I_P___R_E_C_V_E_R_R 和  _I_P___R_O_U_T_E_R___A_L_E_R_T
       是Linux 2.2中的新选项.

       ssttrruucctt iipp__mmrreeqqnn 也是新出现在Linux 2.2中的.Linux 2.0只支持 iipp__mmrreeqq.

       sysctl是在Linux 2.2中引入的.

CCOOMMPPAATTIIBBIILLIITTYY((兼兼容容性性))
       为了与Linux  2.0相容,仍然支持用过时的 ssoocckkeett((PPFF__IINNEETT,, SSOOCCKK__RRAAWW,, _p_r_o_t_o_c_o_l)) 语法打
       开一个 ppaacckkeett(7) 套接字.我们不赞成这么用,而且应该被 ssoocckkeett((PPFF__PPAACCKKEETT,,  SSOOCCKK__RRAAWW,,
       _p_r_o_t_o_c_o_l))  所代替.主要的区别就是 新的针对一般链接层信息的 ssoocckkaaddddrr__llll 地址结构替
       换了旧的 ssoocckkaaddddrr__ppkktt 地址结构.

BBUUGGSS
       有许多不连贯的错误码.

       没有描述用来配置特定IP接口选项和ARP表的ioctl.

AAUUTTHHOORRSS((作作者者))
       该man页作者是Andi Kleen.

SSEEEE AALLSSOO((另另见见))
       sseennddmmssgg(2), rreeccvvmmssgg(2), ssoocckkeett(7), nneettlliinnkk(7), ttccpp(7), uuddpp(7), rraaww(7), iippffww(7).

       RFC791:原始IP规范.
       RFC1122:IPv4主机需求.
       RFC1812:IPv4路由器需求.

[[中中文文版版维维护护人人]]
       rriisseerr <<bboooommeerr@@cccciiddnneett..ccoomm>>

[[中中文文版版最最新新更更新新]]
       22000011//0077//1199

《《中中国国lliinnuuxx论论坛坛mmaann手手册册页页翻翻译译计计划划》》::
       hhttttpp::////ccmmpppp..lliinnuuxxffoorruumm..nneett

跋跋
       本页面中文版由中文 man 手册页计划提供。
       中文 man 手册页计划：hhttttppss::////ggiitthhuubb..ccoomm//mmaann--ppaaggeess--zzhh//mmaannppaaggeess--zzhh

Linux 手册页                         1999年5月11日                                IP(7)
